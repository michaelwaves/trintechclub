/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 -t noodle.glb 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useScroll } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { useTheme } from 'next-themes'

type GLTFResult = GLTF & {
  nodes: {
    bluenoodle: THREE.Mesh
  }
  materials: {
    noodleblue: THREE.MeshStandardMaterial,
    noodleyellow: THREE.MeshStandardMaterial,
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Noodle(props: JSX.IntrinsicElements['group']) {
  const data = useScroll()
  const { theme } = useTheme()

  const blue = new THREE.MeshStandardMaterial({ color: '#1B3BF0' })
  const yellow = new THREE.MeshStandardMaterial({ color: '#E7D54B' })
  useFrame(() => {
    const a = data.range(0, 1)
    const b = data.range(1 / 3, 2 / 3)
    const c = data.range(2 / 3, 1)
    ref.current.rotation.z = a * Math.PI * 4
    /*  ref.current.rotation.x = b * Math.PI * 2 */
    ref.current.position.z = a * 5
    ref.current.position.x = -b * 3 + c * 5
  })
  const ref = useRef<any>()
  const { nodes, materials } = useGLTF('/noodle.glb') as GLTFResult
  return (
    <group {...props} dispose={null} ref={ref} scale={3}>
      <mesh geometry={nodes.bluenoodle.geometry} material={theme == 'dark' ? yellow : blue} />
    </group>
  )
}

useGLTF.preload('/noodle.glb')
