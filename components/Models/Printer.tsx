/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 -t printer.glb 
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useScroll } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useTheme } from 'next-themes'
type GLTFResult = GLTF & {
  nodes: {
    Cube018: THREE.Mesh
    Cube018_1: THREE.Mesh
    Cube018_2: THREE.Mesh
    nozzle: THREE.Mesh
    Cylinder: THREE.Mesh
    Cube001: THREE.Mesh
    Cube001_1: THREE.Mesh
    chungus: THREE.Mesh
    screen: THREE.Mesh
  }
  materials: {
    orange: THREE.MeshStandardMaterial
    black: THREE.MeshStandardMaterial
    blue: THREE.MeshStandardMaterial
    white: THREE.MeshStandardMaterial
    blue_glow: THREE.MeshStandardMaterial
  }
}

type ActionName = 'spool' | 'nozzle'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Printer(props: JSX.IntrinsicElements['group']) {
  const group = useRef<any>()
  const { nodes, materials, animations } = useGLTF('/printer.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    actions.spool?.play()
    actions.nozzle?.play()
  }, [actions])
  const data = useScroll()
  const { theme } = useTheme()

  const white = new THREE.MeshStandardMaterial({ color: '#ffffff' })
  const yellow = new THREE.MeshStandardMaterial({ color: '#E7D54B' })
  useFrame(() => {
    const a = data.range(0, 1)
    const b = data.range(1 / 3, 2 / 3)
    const c = data.range(2 / 3, 1)
    group.current.rotation.y = a * Math.PI * 4
    // ref.current.rotation.x = b * Math.PI * 2 
    group.current.position.z = a * 5
    group.current.position.x = -b * 3 + c * 10
  })
  return (
    <group ref={group} {...props} dispose={null} scale={3}>
      <pointLight intensity={10} position={[-0.05, 0, -0.05]} />
      <group name="Scene" rotation={[0, Math.PI / 2, 0]} >
        <group name="printer" position={[-0.01, 0.205, 0]} rotation={[0, 0, -0.087]} scale={2.561}>
          <mesh name="Cube018" geometry={nodes.Cube018.geometry} material={materials.orange} />
          <mesh name="Cube018_1" geometry={nodes.Cube018_1.geometry} material={materials.black} />
          <mesh name="Cube018_2" geometry={nodes.Cube018_2.geometry} material={materials.black} />
          <mesh name="nozzle" geometry={nodes.nozzle.geometry} material={materials.blue} position={[0.023, 0.05, -0.026]}>
            <mesh name="Cylinder" geometry={nodes.Cylinder.geometry} material={nodes.Cylinder.material} position={[0.014, 0.02, -0.024]} rotation={[0, 0, -1.483]} scale={[0.006, 0.014, 0.006]} />
          </mesh>
          <group name="spool" position={[0.076, 0.086, -0.019]} rotation={[0, 0, -2.221]}>
            <mesh name="Cube001" geometry={nodes.Cube001.geometry} material={materials.white} />
            <mesh name="Cube001_1" geometry={nodes.Cube001_1.geometry} material={materials.black} />
          </group>
        </group>
        <mesh name="chungus" geometry={nodes.chungus.geometry} material={white} position={[-0.024, 0.168, -0.046]} rotation={[0, -Math.PI / 2, 0]} scale={0.002} />
        <mesh name="screen" geometry={nodes.screen.geometry} material={materials.blue_glow} position={[-0.01, 0.205, 0]} rotation={[0, 0, -0.087]} scale={2.561} />
      </group>
    </group>
  )
}

useGLTF.preload('/printer.glb')
